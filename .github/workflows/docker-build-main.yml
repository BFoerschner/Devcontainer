name: Docker Build Coordinator

run-name: Docker Build ${{ github.run_number }}

on:
  workflow_dispatch:
    inputs:
      force_build:
        description: "Force build even if no changes"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: devcontainer_full

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      build_number: ${{ steps.build_number.outputs.build_number }}
      image_digest_amd64: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate build number
        id: build_number
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          echo "build_number=build_${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          echo "Generated build number: build_${BUILD_NUMBER}"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest-amd64
            type=raw,value=${{ steps.build_number.outputs.build_number }}-amd64
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=Full installation devcontainer (amd64)
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push AMD64 image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          platforms: linux/amd64
          build-args: |
            INIT_SCRIPT_PATH=init_scripts/init_full.sh
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64,retention-days=7

  build-arm64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      image_digest_arm64: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Use build number from amd64 job
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          echo "BUILD_NUMBER=build_${BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest-arm64
            type=raw,value=${{ env.BUILD_NUMBER }}-arm64
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=Full installation devcontainer (arm64)
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          platforms: linux/arm64
          build-args: |
            INIT_SCRIPT_PATH=init_scripts/init_full.sh
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64,retention-days=7

  create-manifest:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64]
    permissions:
      contents: read
    
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          BUILD_NUMBER="${{ needs.build-amd64.outputs.build_number }}"
          IMAGE_BASE="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
          
          # Create manifest for latest tag
          docker buildx imagetools create -t ${IMAGE_BASE}:latest \
            ${IMAGE_BASE}:latest-amd64 \
            ${IMAGE_BASE}:latest-arm64
          
          # Create manifest for build number tag
          docker buildx imagetools create -t ${IMAGE_BASE}:${BUILD_NUMBER} \
            ${IMAGE_BASE}:${BUILD_NUMBER}-amd64 \
            ${IMAGE_BASE}:${BUILD_NUMBER}-arm64

      - name: Generate build summary
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: latest, ${{ needs.build-amd64.outputs.build_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Multi-architecture manifest created successfully!" >> $GITHUB_STEP_SUMMARY

  trigger-security-scan:
    runs-on: ubuntu-latest
    needs: [create-manifest]
    steps:
      - name: Trigger security scan workflow
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'docker-security-scan.yml',
              ref: context.ref,
              inputs: {
                image_tag: 'latest',
                build_number: '${{ needs.build-amd64.outputs.build_number }}'
              }
            });
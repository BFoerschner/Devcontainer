name: Docker Security Scan

run-name: Security Scan for Build ${{ github.event.inputs.build_number || github.run_number }}

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag to scan"
        required: true
        default: "latest"
        type: string
      build_number:
        description: "Build number for reference"
        required: false
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: devcontainer_full

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image for scanning
        run: |
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          FULL_IMAGE="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          echo "Pulling image: ${FULL_IMAGE}"
          docker pull ${FULL_IMAGE}
          docker tag ${FULL_IMAGE} local-scan-image:latest

      - name: Run Trivy vulnerability scanner (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "local-scan-image:latest"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy vulnerability scanner (table output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "local-scan-image:latest"
          format: "table"
          exit-code: "0"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Run Trivy vulnerability scanner (JSON output for artifacts)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "local-scan-image:latest"
          format: "json"
          output: "trivy-results.json"

      - name: Upload scan results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results-${{ github.event.inputs.build_number || github.run_number }}
          path: |
            trivy-results.sarif
            trivy-results.json
          retention-days: 30

      - name: Generate security summary
        if: always()
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Scanned**: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number**: ${{ github.event.inputs.build_number || github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "trivy-results.json" ]; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json 2>/dev/null || echo "0")
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-results.json 2>/dev/null || echo "0")
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-results.json 2>/dev/null || echo "0")
            
            echo "### Vulnerability Count by Severity:" >> $GITHUB_STEP_SUMMARY
            echo "- **Critical**: $CRITICAL" >> $GITHUB_STEP_SUMMARY
            echo "- **High**: $HIGH" >> $GITHUB_STEP_SUMMARY
            echo "- **Medium**: $MEDIUM" >> $GITHUB_STEP_SUMMARY
            echo "- **Low**: $LOW" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security scan completed successfully!" >> $GITHUB_STEP_SUMMARY
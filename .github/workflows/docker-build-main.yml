name: Docker Build

run-name: Docker Build ${{ github.run_number }}

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  REGISTRY: docker.io
  IMAGE_NAME: devcontainer

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
    outputs:
      build_number: ${{ steps.version.outputs.build_number }}
      image_digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate semantic version
        id: build_number
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:|!:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
          search_commit_body: true
          user_format_type: "csv"
          bump_each_commit: false
          enable_prerelease_mode: false

      - name: Set build number output
        id: version
        run: |
          echo "build_number=v${{ steps.build_number.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Set lowercase repository owner
        id: repo
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo.outputs.owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.build_number }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=Full installation devcontainer
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          platforms: linux/amd64
          build-args: |
            INIT_SCRIPT_PATH=init_scripts/init_full.sh
            BASE_IMAGE=ubuntu:rolling
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max,retention-days=2
          outputs: type=docker,dest=/tmp/image.tar

      - name: Load Docker image for scanning
        run: |
          docker load < /tmp/image.tar
          # Get the image name from the loaded image and tag it for scanning
          IMAGE_ID=$(docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | grep -v "REPOSITORY" | head -1 | awk '{print $2}')
          docker tag $IMAGE_ID local-scan-image:latest
          echo "Loaded and tagged image for scanning: $IMAGE_ID -> local-scan-image:latest"

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.17.0

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM with Syft
        run: |
          syft local-scan-image:latest -o spdx-json=sbom.json
          syft local-scan-image:latest -o table=sbom.txt

      - name: Run Grype vulnerability scanner
        run: |
          grype local-scan-image:latest -o sarif=grype-results.sarif
          grype local-scan-image:latest -o table --fail-on critical,high
          grype local-scan-image:latest -o json=grype-results.json

      - name: Upload Grype scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: success() && hashFiles('grype-results.sarif') != ''
        with:
          sarif_file: "grype-results.sarif"

      - name: Upload scan results as artifact
        uses: actions/upload-artifact@v4
        if: success() && hashFiles('grype-results.json') != ''
        with:
          name: security-scan-results-${{ steps.version.outputs.build_number }}
          path: |
            grype-results.sarif
            grype-results.json
            sbom.json
            sbom.txt
          retention-days: 30

      - name: Generate security scan summary
        if: success() && hashFiles('grype-results.json') != ''
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Scanned**: local-scan-image:latest (from build ${{ steps.version.outputs.build_number }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "grype-results.json" ]; then
            CRITICAL=$(jq '[.matches[]? | select(.vulnerability.severity=="Critical")] | length' grype-results.json 2>/dev/null || echo "0")
            HIGH=$(jq '[.matches[]? | select(.vulnerability.severity=="High")] | length' grype-results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq '[.matches[]? | select(.vulnerability.severity=="Medium")] | length' grype-results.json 2>/dev/null || echo "0")
            LOW=$(jq '[.matches[]? | select(.vulnerability.severity=="Low")] | length' grype-results.json 2>/dev/null || echo "0")

            echo "### Vulnerability Count by Severity:" >> $GITHUB_STEP_SUMMARY
            echo "- **Critical**: $CRITICAL" >> $GITHUB_STEP_SUMMARY
            echo "- **High**: $HIGH" >> $GITHUB_STEP_SUMMARY
            echo "- **Medium**: $MEDIUM" >> $GITHUB_STEP_SUMMARY
            echo "- **Low**: $LOW" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security scan completed successfully!" >> $GITHUB_STEP_SUMMARY

  post-build:
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read

    steps:
      - name: Verify image push
        run: |
          BUILD_NUMBER="${{ needs.build.outputs.build_number }}"
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_BASE="${{ env.REGISTRY }}/${REPO_OWNER}/${{ env.IMAGE_NAME }}"

          echo "Images successfully pushed:"
          echo "- ${IMAGE_BASE}:latest"
          echo "- ${IMAGE_BASE}:${BUILD_NUMBER}"

      - name: Generate build summary
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "- **Image**: ${{ env.REGISTRY }}/${REPO_OWNER}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: latest, ${{ needs.build.outputs.build_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.build.outputs.build_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Run**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Docker image built and pushed successfully!" >> $GITHUB_STEP_SUMMARY
